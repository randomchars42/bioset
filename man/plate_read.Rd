% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plate.R
\name{plate_read}
\alias{plate_read}
\title{Read a matrix from a data-sheet and turn it into a multi-column tibble.}
\usage{
plate_read(file_name = "plate_#NUM#.csv", path = "./", plate_num = 1,
  sep = ",", cols = 12, rows = 8, additional_vars = vector(),
  additional_sep = "[^[:alnum:]]+")
}
\arguments{
\item{file_name}{Name of the file from which to read the data. May contain
"#NUM#" as a placeholder if you have multiple files (see plate_num).}

\item{path}{The path to file (needs to end with "/").}

\item{plate_num}{Number of the plate to read, inserted for "#NUM#".}

\item{sep}{Separator used in the csv-file, either "," or ";" (see
\code{\link[utils]{read.csv}})}

\item{cols}{Number of columns in the input matrix (\code{NULL} means
auto-detect).}

\item{rows}{Number of rows containing values (not names / additional data)
in the input matrix (\code{NULL} means auto-detect).}

\item{additional_vars}{Vector of strings containing the names for the
additional columns.}

\item{additional_sep}{String / RegExp that separates additional vars, e.g.:
\code{"ID_blue_cold"} with \code{additional_sep = "_"} will be separated
into three columns containg \code{"ID"}, \code{"blue"} and \code{"cold"}.
If the separated data would exceed the columns in \code{additional_vars}
the last column will contain a string with separator (e.g.: "blue_cold").
If data is missing \code{NA} is inserted.}
}
\value{
A tibble containing (at minimum) \code{plate}, \code{position} and
\code{value}.
}
\description{
This function is intended to ease working with data coming in matrices, for
example from a plate-reader measuring extinction-values or relative light
units from bio-assays.

This data tends to be presented in matrices in the shape of the measured
plate. For a 96-well plate, something like this might be output:

\tabular{rrrrr}{
  ValA1 \tab ValA2 \tab ValA3 \tab ... \tab ValA12\cr
  ValB1 \tab ValB2 \tab ValB3 \tab ... \tab ValB12\cr
  ... \tab ... \tab ... \tab ... \tab ...\cr
  ValH1 \tab ValH2 \tab ValH3 \tab ... \tab ValH12
}

Save these values as "plate_1.csv".

You may add names by formatting your sheet like:

\tabular{rrrrr}{
  ValA1 \tab ValA2 \tab ValA3 \tab ... \tab ValA12\cr
  ValB1 \tab ValB2 \tab ValB3 \tab ... \tab ValB12\cr
  ... \tab ... \tab ... \tab ... \tab ...\cr
  ValH1 \tab ValH2 \tab ValH3 \tab ... \tab ValH12\cr
  NameA1 \tab NameA2 \tab NameA3 \tab ... \tab NameA12\cr
  NameB1 \tab NameB2 \tab NameB3 \tab ... \tab NameB12\cr
  ... \tab ... \tab ... \tab ... \tab ...\cr
}

(You get it ;) )

\code{plate_read()} will turn it into a 3 x 96 tibble:

\tabular{rrr}{
  plate \tab name \tab value\cr
  1 \tab NameA1 \tab ValA1\cr
  1 \tab NameA2 \tab ValA2\cr
  ... \tab ... \tab ...\cr
  1 \tab NameH12 \tab ValH12\cr
}

To add arbitrary values you can format the data like:

\tabular{rrrrr}{
  ValA1 \tab ValA2 \tab ValA3 \tab ... \tab ValA12\cr
  ValB1 \tab ValB2 \tab ValB3 \tab ... \tab ValB12\cr
  ... \tab ... \tab ... \tab ... \tab ...\cr
  ValH1 \tab ValH2 \tab ValH3 \tab ... \tab ValH12\cr
  NameA1_PropA1 \tab NameA2_PropA2 \tab NameA3_PropA3 \tab ... \tab
  NameA12_PropA12\cr
  NameB1_PropB1 \tab NameB2_PropB2 \tab NameB3_PropB3 \tab ... \tab
  NameB12_PropB12\cr
  ... \tab ... \tab ... \tab ... \tab ...\cr
}

\code{plate_read()} will turn it into:

\tabular{rrrr}{
  plate \tab name \tab value \tab property\cr
  1 \tab NameA1 \tab ValA1 \tab PropA1\cr
  1 \tab NameA2 \tab ValA2 \tab PropA2\cr
  ... \tab ... \tab ... \tab ...\cr
  1 \tab NameH12 \tab ValH12 \tab PropH12\cr
}
}
